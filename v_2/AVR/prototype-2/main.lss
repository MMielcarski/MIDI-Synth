
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000288  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00800094  00800094  00000350  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095a  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000657  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f2  00000000  00000000  00001379  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b5  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 30       	cpi	r26, 0x02	; 2
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  8a:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIM1_Init>:

// ------------------------- TIMER ----------------------------------------

void TIM1_Init()	// enable interrupts
{
    OCR1A = (((F_CPU/1000) / TIM1_PSC) * TIM1_PER) - 1;	// counter size
  92:	8b ed       	ldi	r24, 0xDB	; 219
  94:	95 e0       	ldi	r25, 0x05	; 5
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
    TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1 << OCIE1A);						// Set interrupt on compare match	
  a0:	89 b7       	in	r24, 0x39	; 57
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	89 bf       	out	0x39, r24	; 57
    TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	8e bd       	out	0x2e, r24	; 46
    sei();	
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <USART_Init>:

// ------------------------- USART ----------------------------------------

void USART_Init(unsigned int ubrr)		
{
   UBRRH = (unsigned char)(ubrr>>8);	// set baud rate to 9600
  b0:	90 bd       	out	0x20, r25	; 32
   UBRRL = (unsigned char)ubrr;		//
  b2:	89 b9       	out	0x09, r24	; 9
   UCSRB = (1<<TXEN);		// Enable transmitter 
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);		// Set frame format: 8data, 2stop bit
  b8:	8e e8       	ldi	r24, 0x8E	; 142
  ba:	80 bd       	out	0x20, r24	; 32
  bc:	08 95       	ret

000000be <uart_putchar>:
}

void uart_putchar(char c) 
{
	while ( !(UCSRA & (1<<UDRE)) )	// Wait for empty transmit buffer 
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <uart_putchar>
	;
    UDR = c;							// Put data into buffer, sends the data 
  c2:	8c b9       	out	0x0c, r24	; 12
  c4:	08 95       	ret

000000c6 <uart_getchar>:
}

char uart_getchar(void) {
    loop_until_bit_is_set(UCSRA, RXC); 	// Wait until data exists
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <uart_getchar>
    return UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
}
  cc:	08 95       	ret

000000ce <uart_putstring>:

void uart_putstring(char tab[])
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	int i =0;
	while (( UCSRA & (1<<UDRE))  == 0){};
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <uart_putstring+0x4>
  d6:	ec 01       	movw	r28, r24
        while (tab[i] != 0x00)
  d8:	89 91       	ld	r24, Y+
  da:	88 23       	and	r24, r24
  dc:	19 f0       	breq	.+6      	; 0xe4 <uart_putstring+0x16>
		{ 
            uart_putchar(tab[i]);
  de:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <uart_putstring+0xa>
			i++; 
        }
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <uart_putint>:

void uart_putint(int value)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	60 97       	sbiw	r28, 0x10	; 16
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
	char tab[16];
	itoa(value,tab,10);
  fe:	4a e0       	ldi	r20, 0x0A	; 10
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	be 01       	movw	r22, r28
 104:	6f 5f       	subi	r22, 0xFF	; 255
 106:	7f 4f       	sbci	r23, 0xFF	; 255
 108:	0e 94 02 01 	call	0x204	; 0x204 <itoa>
	uart_putstring(tab);
 10c:	ce 01       	movw	r24, r28
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	0e 94 67 00 	call	0xce	; 0xce <uart_putstring>
}
 114:	60 96       	adiw	r28, 0x10	; 16
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <ADC_Init>:

// ------------------------- ADC ----------------------------------------

void ADC_Init()
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz
 126:	86 b1       	in	r24, 0x06	; 6
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0); 	// Set ADC reference to AVCC
 12c:	3e 9a       	sbi	0x07, 6	; 7
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
 12e:	37 9a       	sbi	0x06, 7	; 6
 130:	08 95       	ret

00000132 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)		
{
	channel &= 0x07;					// AND operation with 7 (will keep channel between 0-7) 
	ADMUX = (ADMUX & 0xF8) | channel;	// clears 3 first bits before OR
 132:	97 b1       	in	r25, 0x07	; 7
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	87 70       	andi	r24, 0x07	; 7
 138:	89 2b       	or	r24, r25
 13a:	87 b9       	out	0x07, r24	; 7

	ADCSRA |= (1 << ADSC);				// start single convesrion
 13c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));		// wait for conversion to complete
 13e:	36 99       	sbic	0x06, 6	; 6
 140:	fe cf       	rjmp	.-4      	; 0x13e <ADC_read+0xc>
	return ADCW;
 142:	84 b1       	in	r24, 0x04	; 4
 144:	95 b1       	in	r25, 0x05	; 5
}
 146:	08 95       	ret

00000148 <PORT_Init>:



void PORT_Init()
{
	MCUCSR = (1<<JTD);			//disabling JTAG
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);			//
 14c:	84 bf       	out	0x34, r24	; 52
	DDRD = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 152:	84 bb       	out	0x14, r24	; 20
 154:	08 95       	ret

00000156 <note_on>:
}

void note_on(int key, int oct)
{
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	8c 01       	movw	r16, r24
 160:	eb 01       	movw	r28, r22
	//uart_putchar('N');
	//uart_putchar('-');
	uart_putstring("\nkey:");
 162:	82 e8       	ldi	r24, 0x82	; 130
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 67 00 	call	0xce	; 0xce <uart_putstring>
	uart_putint(key);
 16a:	c8 01       	movw	r24, r16
 16c:	0e 94 75 00 	call	0xea	; 0xea <uart_putint>
	//uart_putchar('O');
	//uart_putchar('-');
	uart_putstring("\noct");
 170:	88 e8       	ldi	r24, 0x88	; 136
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 67 00 	call	0xce	; 0xce <uart_putstring>
	uart_putint(oct);
 178:	ce 01       	movw	r24, r28
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
	uart_putstring("\nkey:");
	uart_putint(key);
	//uart_putchar('O');
	//uart_putchar('-');
	uart_putstring("\noct");
	uart_putint(oct);
 182:	0c 94 75 00 	jmp	0xea	; 0xea <uart_putint>

00000186 <note_off>:
}

void note_off(int key, int oct)
{
 186:	08 95       	ret

00000188 <__vector_7>:

}

ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	// adc_0 = ADC_read(0);
	// uart_putstring("\nADC0:");
	// uart_putint(adc_0);
	// //uart_putchar('K');

	adc_1 = ADC_read(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 99 00 	call	0x132	; 0x132 <ADC_read>
 1b0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <adc_1+0x1>
 1b4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <adc_1>
	uart_putstring("\nADC1:");
 1b8:	8d e8       	ldi	r24, 0x8D	; 141
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 67 00 	call	0xce	; 0xce <uart_putstring>
	uart_putint(adc_1);
 1c0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <adc_1>
 1c4:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <adc_1+0x1>
 1c8:	0e 94 75 00 	call	0xea	; 0xea <uart_putint>

	// adc_6 = ADC_read(6);
	// uart_putstring("\nADC6:");
	// uart_putint(adc_6);
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <main>:

// ------------------------- MAIN ----------------------------------------

int main(void)
{
	USART_Init(MYUBRR);
 1ee:	87 e6       	ldi	r24, 0x67	; 103
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_Init>
	PORT_Init();
 1f6:	0e 94 a4 00 	call	0x148	; 0x148 <PORT_Init>
	ADC_Init();
 1fa:	0e 94 93 00 	call	0x126	; 0x126 <ADC_Init>
	TIM1_Init();
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <TIM1_Init>
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x14>

00000204 <itoa>:
 204:	45 32       	cpi	r20, 0x25	; 37
 206:	51 05       	cpc	r21, r1
 208:	20 f4       	brcc	.+8      	; 0x212 <itoa+0xe>
 20a:	42 30       	cpi	r20, 0x02	; 2
 20c:	10 f0       	brcs	.+4      	; 0x212 <itoa+0xe>
 20e:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__itoa_ncheck>
 212:	fb 01       	movw	r30, r22
 214:	10 82       	st	Z, r1
 216:	cb 01       	movw	r24, r22
 218:	08 95       	ret

0000021a <__itoa_ncheck>:
 21a:	bb 27       	eor	r27, r27
 21c:	4a 30       	cpi	r20, 0x0A	; 10
 21e:	31 f4       	brne	.+12     	; 0x22c <__itoa_ncheck+0x12>
 220:	99 23       	and	r25, r25
 222:	22 f4       	brpl	.+8      	; 0x22c <__itoa_ncheck+0x12>
 224:	bd e2       	ldi	r27, 0x2D	; 45
 226:	90 95       	com	r25
 228:	81 95       	neg	r24
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	0c 94 19 01 	jmp	0x232	; 0x232 <__utoa_common>

00000230 <__utoa_ncheck>:
 230:	bb 27       	eor	r27, r27

00000232 <__utoa_common>:
 232:	fb 01       	movw	r30, r22
 234:	55 27       	eor	r21, r21
 236:	aa 27       	eor	r26, r26
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	aa 1f       	adc	r26, r26
 23e:	a4 17       	cp	r26, r20
 240:	10 f0       	brcs	.+4      	; 0x246 <__utoa_common+0x14>
 242:	a4 1b       	sub	r26, r20
 244:	83 95       	inc	r24
 246:	50 51       	subi	r21, 0x10	; 16
 248:	b9 f7       	brne	.-18     	; 0x238 <__utoa_common+0x6>
 24a:	a0 5d       	subi	r26, 0xD0	; 208
 24c:	aa 33       	cpi	r26, 0x3A	; 58
 24e:	08 f0       	brcs	.+2      	; 0x252 <__utoa_common+0x20>
 250:	a9 5d       	subi	r26, 0xD9	; 217
 252:	a1 93       	st	Z+, r26
 254:	00 97       	sbiw	r24, 0x00	; 0
 256:	79 f7       	brne	.-34     	; 0x236 <__utoa_common+0x4>
 258:	b1 11       	cpse	r27, r1
 25a:	b1 93       	st	Z+, r27
 25c:	11 92       	st	Z+, r1
 25e:	cb 01       	movw	r24, r22
 260:	0c 94 32 01 	jmp	0x264	; 0x264 <strrev>

00000264 <strrev>:
 264:	dc 01       	movw	r26, r24
 266:	fc 01       	movw	r30, r24
 268:	67 2f       	mov	r22, r23
 26a:	71 91       	ld	r23, Z+
 26c:	77 23       	and	r23, r23
 26e:	e1 f7       	brne	.-8      	; 0x268 <strrev+0x4>
 270:	32 97       	sbiw	r30, 0x02	; 2
 272:	04 c0       	rjmp	.+8      	; 0x27c <strrev+0x18>
 274:	7c 91       	ld	r23, X
 276:	6d 93       	st	X+, r22
 278:	70 83       	st	Z, r23
 27a:	62 91       	ld	r22, -Z
 27c:	ae 17       	cp	r26, r30
 27e:	bf 07       	cpc	r27, r31
 280:	c8 f3       	brcs	.-14     	; 0x274 <strrev+0x10>
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
