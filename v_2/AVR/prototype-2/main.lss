
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000432  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000092  00800082  00800082  000004e8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae4  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068c  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ba  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000447  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 31       	cpi	r26, 0x14	; 20
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8a:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIM1_Init>:
//double control_prev_value = 0;

// ------------------------- TIMER ----------------------------------------
void TIM1_Init(void)	// enable interrupts
{
    OCR1A = (((F_CPU/1000) / TIM1_PSC) * TIM1_PER) - 1;	// counter size
  92:	85 e9       	ldi	r24, 0x95	; 149
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
    TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1 << OCIE1A);						// Set interrupt on compare match	
  a0:	89 b7       	in	r24, 0x39	; 57
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	89 bf       	out	0x39, r24	; 57
    TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	8e bd       	out	0x2e, r24	; 46
    sei();	
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <USART_Init>:
}

// ------------------------- USART ----------------------------------------
void USART_Init(unsigned int ubrr)		
{
   UBRRH = (unsigned char)(ubrr>>8);	// set baud rate to 31250
  b0:	90 bd       	out	0x20, r25	; 32
   UBRRL = (unsigned char)ubrr;		//
  b2:	89 b9       	out	0x09, r24	; 9
   UCSRB = (1<<TXEN);		// Enable transmitter 
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);		// Set frame format: 8data, 2stop bit
  b8:	8e e8       	ldi	r24, 0x8E	; 142
  ba:	80 bd       	out	0x20, r24	; 32
  bc:	08 95       	ret

000000be <uart_putchar>:
}

void uart_putchar(char c) 
{
	while ( !(UCSRA & (1<<UDRE)) )	// Wait for empty transmit buffer 
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <uart_putchar>
	;
    UDR = c;							// Put data into buffer, sends the data 
  c2:	8c b9       	out	0x0c, r24	; 12
  c4:	08 95       	ret

000000c6 <uart_putstring>:
}

void uart_putstring(char tab[])
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	int i =0;
	while (( UCSRA & (1<<UDRE))  == 0){};
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <uart_putstring+0x4>
  ce:	ec 01       	movw	r28, r24
        while (tab[i] != 0x00)
  d0:	89 91       	ld	r24, Y+
  d2:	88 23       	and	r24, r24
  d4:	19 f0       	breq	.+6      	; 0xdc <uart_putstring+0x16>
		{ 
            uart_putchar(tab[i]);
  d6:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
  da:	fa cf       	rjmp	.-12     	; 0xd0 <uart_putstring+0xa>
			i++; 
        }
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <uart_putint>:

void uart_putint(int value)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	60 97       	sbiw	r28, 0x10	; 16
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
	char tab[16];
	itoa(value,tab,10);
  f6:	4a e0       	ldi	r20, 0x0A	; 10
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	be 01       	movw	r22, r28
  fc:	6f 5f       	subi	r22, 0xFF	; 255
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
 100:	0e 94 d7 01 	call	0x3ae	; 0x3ae <itoa>
	uart_putstring(tab);
 104:	ce 01       	movw	r24, r28
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_putstring>
}
 10c:	60 96       	adiw	r28, 0x10	; 16
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <ADC_Init>:

// ------------------------- ADC ----------------------------------------
void ADC_Init(void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	87 60       	ori	r24, 0x07	; 7
 122:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0); 	// Set ADC reference to AVCC
 124:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN);  // Enable ADC
 126:	37 9a       	sbi	0x06, 7	; 6
 128:	08 95       	ret

0000012a <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)		
{
	channel &= 0x07;					// AND operation with 7 (will keep channel between 0-7) 
	ADMUX = (ADMUX & 0xF8) | channel;	// clears 3 first bits before OR
 12a:	97 b1       	in	r25, 0x07	; 7
 12c:	98 7f       	andi	r25, 0xF8	; 248
 12e:	87 70       	andi	r24, 0x07	; 7
 130:	89 2b       	or	r24, r25
 132:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);				// start single convesrion
 134:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));		// wait for conversion to complete
 136:	36 99       	sbic	0x06, 6	; 6
 138:	fe cf       	rjmp	.-4      	; 0x136 <ADC_read+0xc>
	return ADCW;
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	95 b1       	in	r25, 0x05	; 5
}
 13e:	08 95       	ret

00000140 <PORT_Init>:
// ------------------------- OTHER ----------------------------------------

void PORT_Init(void)
{
	MCUCSR = (1<<JTD);			//disabling JTAG
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);			//
 144:	84 bf       	out	0x34, r24	; 52
	DDRD = 0xFF;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 14a:	84 bb       	out	0x14, r24	; 20
 14c:	08 95       	ret

0000014e <note_on>:
}

void note_on(int key, int oct)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	c8 2f       	mov	r28, r24
 154:	d6 2f       	mov	r29, r22
	uart_putchar(NOTE_ON_CMD);		// note on
 156:	80 e9       	ldi	r24, 0x90	; 144
 158:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(key + oct * 12);
 15c:	8c 2f       	mov	r24, r28
 15e:	9c e0       	ldi	r25, 0x0C	; 12
 160:	d9 9f       	mul	r29, r25
 162:	80 0d       	add	r24, r0
 164:	11 24       	eor	r1, r1
 166:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(VEL_DEF_CMD);
 16a:	80 e4       	ldi	r24, 0x40	; 64
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28

void note_on(int key, int oct)
{
	uart_putchar(NOTE_ON_CMD);		// note on
	uart_putchar(key + oct * 12);
	uart_putchar(VEL_DEF_CMD);
 170:	0c 94 5f 00 	jmp	0xbe	; 0xbe <uart_putchar>

00000174 <note_off>:
}

void note_off(int key, int oct)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	c8 2f       	mov	r28, r24
 17a:	d6 2f       	mov	r29, r22
	uart_putchar(NOTE_OFF_CMD);		// note off
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(key + oct * 12);
 182:	8c 2f       	mov	r24, r28
 184:	9c e0       	ldi	r25, 0x0C	; 12
 186:	d9 9f       	mul	r29, r25
 188:	80 0d       	add	r24, r0
 18a:	11 24       	eor	r1, r1
 18c:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(VEL_DEF_CMD);
 190:	80 e4       	ldi	r24, 0x40	; 64
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28

void note_off(int key, int oct)
{
	uart_putchar(NOTE_OFF_CMD);		// note off
	uart_putchar(key + oct * 12);
	uart_putchar(VEL_DEF_CMD);
 196:	0c 94 5f 00 	jmp	0xbe	; 0xbe <uart_putchar>

0000019a <CC_send_ADC>:
}

void CC_send_ADC(uint8_t control_num,  unsigned int channel)
{
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	f8 2e       	mov	r15, r24
	adc_prev_read[channel] = adc_read[channel];
 1a6:	eb 01       	movw	r28, r22
 1a8:	cc 0f       	add	r28, r28
 1aa:	dd 1f       	adc	r29, r29
 1ac:	8e 01       	movw	r16, r28
 1ae:	04 57       	subi	r16, 0x74	; 116
 1b0:	1f 4f       	sbci	r17, 0xFF	; 255
 1b2:	c4 56       	subi	r28, 0x64	; 100
 1b4:	df 4f       	sbci	r29, 0xFF	; 255
 1b6:	88 81       	ld	r24, Y
 1b8:	99 81       	ldd	r25, Y+1	; 0x01
 1ba:	f8 01       	movw	r30, r16
 1bc:	91 83       	std	Z+1, r25	; 0x01
 1be:	80 83       	st	Z, r24
	adc_read[channel] = ADC_read(channel);
 1c0:	86 2f       	mov	r24, r22
 1c2:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_read>
 1c6:	99 83       	std	Y+1, r25	; 0x01
 1c8:	88 83       	st	Y, r24

	//value = value*127/1024;
	//prev_value = prev_value*127/1024;

	uint8_t adc_7bit = (adc_read[channel] >> 3);
 1ca:	ec 01       	movw	r28, r24
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	d5 95       	asr	r29
 1d0:	c7 95       	ror	r28
 1d2:	9a 95       	dec	r25
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <CC_send_ADC+0x34>
	uint8_t adc_prev_7bit = (adc_prev_read[channel] >> 3);

	//uart_putint(test1);
	//uart_putstring("\n");

	if((int)adc_7bit != (int)adc_prev_7bit)
 1d6:	f8 01       	movw	r30, r16
 1d8:	80 81       	ld	r24, Z
 1da:	91 81       	ldd	r25, Z+1	; 0x01
 1dc:	23 e0       	ldi	r18, 0x03	; 3
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	2a 95       	dec	r18
 1e4:	e1 f7       	brne	.-8      	; 0x1de <CC_send_ADC+0x44>
 1e6:	c8 17       	cp	r28, r24
 1e8:	71 f0       	breq	.+28     	; 0x206 <CC_send_ADC+0x6c>
	{
		uart_putchar(CC_CMD);
 1ea:	80 eb       	ldi	r24, 0xB0	; 176
 1ec:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
		uart_putchar(control_num);
 1f0:	8f 2d       	mov	r24, r15
 1f2:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
		uart_putchar(adc_7bit);
 1f6:	8c 2f       	mov	r24, r28
	}
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15

	if((int)adc_7bit != (int)adc_prev_7bit)
	{
		uart_putchar(CC_CMD);
		uart_putchar(control_num);
		uart_putchar(adc_7bit);
 202:	0c 94 5f 00 	jmp	0xbe	; 0xbe <uart_putchar>
	}
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	08 95       	ret

00000212 <__vector_7>:

ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
		 //adc_0_prev = adc_0;
	 //adc_0 = ADC_read(0);

	//if(adc_0 <= (adc_0_prev - 5) || adc_0 >= (adc_0_prev + 5))
	//{
		CC_send_ADC(CC_VOLUME, 0);	// slide 1
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	0e 94 cd 00 	call	0x19a	; 0x19a <CC_send_ADC>
		CC_send_ADC(CC_VOLUME, 4);	// knob 3
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	0e 94 cd 00 	call	0x19a	; 0x19a <CC_send_ADC>
		CC_send_ADC(CC_VOLUME, 6);	// joystick 1
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	0e 94 cd 00 	call	0x19a	; 0x19a <CC_send_ADC>
		CC_send_ADC(CC_VOLUME, 7);	// joystick 2
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	0e 94 cd 00 	call	0x19a	; 0x19a <CC_send_ADC>
	//uart_putint(adc_1);

	//  adc_6 = ADC_read(6);
	//  uart_putstring("\nADC6:");
	//  uart_putint(adc_6);
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <main>:

// ------------------------- MAIN ----------------------------------------

int main(void)
{
	USART_Init(MYUBRR);
 27e:	8f e1       	ldi	r24, 0x1F	; 31
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_Init>
	PORT_Init();
 286:	0e 94 a0 00 	call	0x140	; 0x140 <PORT_Init>
	ADC_Init();
 28a:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_Init>
	TIM1_Init();
 28e:	0e 94 49 00 	call	0x92	; 0x92 <TIM1_Init>
			{
				PORTD |= (1<<NOTES_tab[i]);
			}
			else		// PORTC
			{
				PORTC |= (1<<NOTES_tab[i]);
 292:	cc 24       	eor	r12, r12
 294:	c3 94       	inc	r12
 296:	d1 2c       	mov	r13, r1
 298:	08 e6       	ldi	r16, 0x68	; 104
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	9c ea       	ldi	r25, 0xAC	; 172
 29e:	69 2e       	mov	r6, r25
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	79 2e       	mov	r7, r25

	while(1)
	{
		// ----- keyboard handle -> working without last key --------

		for(int i=0; i<13; i++)		// notes loop
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(i < 7)	// PORTD
 2a8:	c7 30       	cpi	r28, 0x07	; 7
 2aa:	d1 05       	cpc	r29, r1
 2ac:	64 f4       	brge	.+24     	; 0x2c6 <main+0x48>
			{
				PORTD |= (1<<NOTES_tab[i]);
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	c6 01       	movw	r24, r12
 2b2:	f8 01       	movw	r30, r16
 2b4:	00 80       	ld	r0, Z
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <main+0x3e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <main+0x3a>
 2c0:	82 2b       	or	r24, r18
 2c2:	82 bb       	out	0x12, r24	; 18
 2c4:	0b c0       	rjmp	.+22     	; 0x2dc <main+0x5e>
			}
			else		// PORTC
			{
				PORTC |= (1<<NOTES_tab[i]);
 2c6:	25 b3       	in	r18, 0x15	; 21
 2c8:	c6 01       	movw	r24, r12
 2ca:	f8 01       	movw	r30, r16
 2cc:	00 80       	ld	r0, Z
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <main+0x56>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <main+0x52>
 2d8:	82 2b       	or	r24, r18
 2da:	85 bb       	out	0x15, r24	; 21
 2dc:	80 e6       	ldi	r24, 0x60	; 96
 2de:	a8 2e       	mov	r10, r24
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	b8 2e       	mov	r11, r24

	while(1)
	{
		// ----- keyboard handle -> working without last key --------

		for(int i=0; i<13; i++)		// notes loop
 2e4:	73 01       	movw	r14, r6
 2e6:	81 2c       	mov	r8, r1
 2e8:	91 2c       	mov	r9, r1
			// 	}
			// }

			for(int j=0; j<4; j++)		// octaves loop
			{
				if( PINB & (1<<OCTAVES_tab[j]) && !(PRESSED_BUTTON_tab[i][j]) )
 2ea:	86 b3       	in	r24, 0x16	; 22
 2ec:	f5 01       	movw	r30, r10
 2ee:	20 81       	ld	r18, Z
 2f0:	f2 e0       	ldi	r31, 0x02	; 2
 2f2:	af 0e       	add	r10, r31
 2f4:	b1 1c       	adc	r11, r1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <main+0x82>
 2fc:	95 95       	asr	r25
 2fe:	87 95       	ror	r24
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <main+0x7e>
 304:	80 ff       	sbrs	r24, 0
 306:	0c c0       	rjmp	.+24     	; 0x320 <main+0xa2>
 308:	f7 01       	movw	r30, r14
 30a:	80 81       	ld	r24, Z
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	89 2b       	or	r24, r25
 310:	39 f4       	brne	.+14     	; 0x320 <main+0xa2>
				{
					PRESSED_BUTTON_tab[i][j] = 1;
 312:	d1 82       	std	Z+1, r13	; 0x01
 314:	c0 82       	st	Z, r12
					note_on(i,j);
 316:	b4 01       	movw	r22, r8
 318:	ce 01       	movw	r24, r28
 31a:	0e 94 a7 00 	call	0x14e	; 0x14e <note_on>
 31e:	14 c0       	rjmp	.+40     	; 0x348 <main+0xca>
				}
				else if( !(PINB & (1<<OCTAVES_tab[j])) && PRESSED_BUTTON_tab[i][j] )
 320:	86 b3       	in	r24, 0x16	; 22
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <main+0xac>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	2a 95       	dec	r18
 32c:	e2 f7       	brpl	.-8      	; 0x326 <main+0xa8>
 32e:	80 fd       	sbrc	r24, 0
 330:	0b c0       	rjmp	.+22     	; 0x348 <main+0xca>
 332:	f7 01       	movw	r30, r14
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	89 2b       	or	r24, r25
 33a:	31 f0       	breq	.+12     	; 0x348 <main+0xca>
				{
					PRESSED_BUTTON_tab[i][j] = 0;
 33c:	11 82       	std	Z+1, r1	; 0x01
 33e:	10 82       	st	Z, r1
					note_off(i,j);
 340:	b4 01       	movw	r22, r8
 342:	ce 01       	movw	r24, r28
 344:	0e 94 ba 00 	call	0x174	; 0x174 <note_off>
			// 		PRESSED_BUTTON_tab[12][0] = 0;
			// 		note_off(12,0);
			// 	}
			// }

			for(int j=0; j<4; j++)		// octaves loop
 348:	ff ef       	ldi	r31, 0xFF	; 255
 34a:	8f 1a       	sub	r8, r31
 34c:	9f 0a       	sbc	r9, r31
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	e8 0e       	add	r14, r24
 352:	f1 1c       	adc	r15, r1
 354:	94 e0       	ldi	r25, 0x04	; 4
 356:	89 16       	cp	r8, r25
 358:	91 04       	cpc	r9, r1
 35a:	39 f6       	brne	.-114    	; 0x2ea <main+0x6c>
					PRESSED_BUTTON_tab[i][j] = 0;
					note_off(i,j);
				}
			}
			
			if(i < 7)	// PORTD
 35c:	c7 30       	cpi	r28, 0x07	; 7
 35e:	d1 05       	cpc	r29, r1
 360:	74 f4       	brge	.+28     	; 0x37e <main+0x100>
			{
				PORTD &= ~(1<<NOTES_tab[i]);
 362:	92 b3       	in	r25, 0x12	; 18
 364:	96 01       	movw	r18, r12
 366:	f8 01       	movw	r30, r16
 368:	00 80       	ld	r0, Z
 36a:	02 c0       	rjmp	.+4      	; 0x370 <main+0xf2>
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <main+0xee>
 374:	82 2f       	mov	r24, r18
 376:	80 95       	com	r24
 378:	89 23       	and	r24, r25
 37a:	82 bb       	out	0x12, r24	; 18
 37c:	0d c0       	rjmp	.+26     	; 0x398 <main+0x11a>
			}
			else		// PORT C
			{
				PORTC &= ~(1<<NOTES_tab[i]);
 37e:	95 b3       	in	r25, 0x15	; 21
 380:	96 01       	movw	r18, r12
 382:	f8 01       	movw	r30, r16
 384:	00 80       	ld	r0, Z
 386:	02 c0       	rjmp	.+4      	; 0x38c <main+0x10e>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <main+0x10a>
 390:	82 2f       	mov	r24, r18
 392:	80 95       	com	r24
 394:	89 23       	and	r24, r25
 396:	85 bb       	out	0x15, r24	; 21

	while(1)
	{
		// ----- keyboard handle -> working without last key --------

		for(int i=0; i<13; i++)		// notes loop
 398:	21 96       	adiw	r28, 0x01	; 1
 39a:	0e 5f       	subi	r16, 0xFE	; 254
 39c:	1f 4f       	sbci	r17, 0xFF	; 255
 39e:	f8 e0       	ldi	r31, 0x08	; 8
 3a0:	6f 0e       	add	r6, r31
 3a2:	71 1c       	adc	r7, r1
 3a4:	cd 30       	cpi	r28, 0x0D	; 13
 3a6:	d1 05       	cpc	r29, r1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <main+0x12e>
 3aa:	7e cf       	rjmp	.-260    	; 0x2a8 <main+0x2a>
 3ac:	75 cf       	rjmp	.-278    	; 0x298 <main+0x1a>

000003ae <itoa>:
 3ae:	45 32       	cpi	r20, 0x25	; 37
 3b0:	51 05       	cpc	r21, r1
 3b2:	20 f4       	brcc	.+8      	; 0x3bc <itoa+0xe>
 3b4:	42 30       	cpi	r20, 0x02	; 2
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <itoa+0xe>
 3b8:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__itoa_ncheck>
 3bc:	fb 01       	movw	r30, r22
 3be:	10 82       	st	Z, r1
 3c0:	cb 01       	movw	r24, r22
 3c2:	08 95       	ret

000003c4 <__itoa_ncheck>:
 3c4:	bb 27       	eor	r27, r27
 3c6:	4a 30       	cpi	r20, 0x0A	; 10
 3c8:	31 f4       	brne	.+12     	; 0x3d6 <__itoa_ncheck+0x12>
 3ca:	99 23       	and	r25, r25
 3cc:	22 f4       	brpl	.+8      	; 0x3d6 <__itoa_ncheck+0x12>
 3ce:	bd e2       	ldi	r27, 0x2D	; 45
 3d0:	90 95       	com	r25
 3d2:	81 95       	neg	r24
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__utoa_common>

000003da <__utoa_ncheck>:
 3da:	bb 27       	eor	r27, r27

000003dc <__utoa_common>:
 3dc:	fb 01       	movw	r30, r22
 3de:	55 27       	eor	r21, r21
 3e0:	aa 27       	eor	r26, r26
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	aa 1f       	adc	r26, r26
 3e8:	a4 17       	cp	r26, r20
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <__utoa_common+0x14>
 3ec:	a4 1b       	sub	r26, r20
 3ee:	83 95       	inc	r24
 3f0:	50 51       	subi	r21, 0x10	; 16
 3f2:	b9 f7       	brne	.-18     	; 0x3e2 <__utoa_common+0x6>
 3f4:	a0 5d       	subi	r26, 0xD0	; 208
 3f6:	aa 33       	cpi	r26, 0x3A	; 58
 3f8:	08 f0       	brcs	.+2      	; 0x3fc <__utoa_common+0x20>
 3fa:	a9 5d       	subi	r26, 0xD9	; 217
 3fc:	a1 93       	st	Z+, r26
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	79 f7       	brne	.-34     	; 0x3e0 <__utoa_common+0x4>
 402:	b1 11       	cpse	r27, r1
 404:	b1 93       	st	Z+, r27
 406:	11 92       	st	Z+, r1
 408:	cb 01       	movw	r24, r22
 40a:	0c 94 07 02 	jmp	0x40e	; 0x40e <strrev>

0000040e <strrev>:
 40e:	dc 01       	movw	r26, r24
 410:	fc 01       	movw	r30, r24
 412:	67 2f       	mov	r22, r23
 414:	71 91       	ld	r23, Z+
 416:	77 23       	and	r23, r23
 418:	e1 f7       	brne	.-8      	; 0x412 <strrev+0x4>
 41a:	32 97       	sbiw	r30, 0x02	; 2
 41c:	04 c0       	rjmp	.+8      	; 0x426 <strrev+0x18>
 41e:	7c 91       	ld	r23, X
 420:	6d 93       	st	X+, r22
 422:	70 83       	st	Z, r23
 424:	62 91       	ld	r22, -Z
 426:	ae 17       	cp	r26, r30
 428:	bf 07       	cpc	r27, r31
 42a:	c8 f3       	brcs	.-14     	; 0x41e <strrev+0x10>
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
