
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000036a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00800082  00800082  00000420  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a0  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027c  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000292  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3f       	cpi	r26, 0xF0	; 240
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  8a:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIM1_Init>:

// ------------------------- TIMER ----------------------------------------

void TIM1_Init()	// enable interrupts
{
    OCR1A = (((F_CPU/1000) / TIM1_PSC) * TIM1_PER) - 1;	// counter size
  92:	8b ed       	ldi	r24, 0xDB	; 219
  94:	95 e0       	ldi	r25, 0x05	; 5
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
    TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1 << OCIE1A);						// Set interrupt on compare match	
  a0:	89 b7       	in	r24, 0x39	; 57
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	89 bf       	out	0x39, r24	; 57
    TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	8e bd       	out	0x2e, r24	; 46
    sei();	
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <USART_Init>:

// ------------------------- USART ----------------------------------------

void USART_Init(unsigned int ubrr)		
{
   UBRRH = (unsigned char)(ubrr>>8);	// set baud rate to 31250
  b0:	90 bd       	out	0x20, r25	; 32
   UBRRL = (unsigned char)ubrr;		//
  b2:	89 b9       	out	0x09, r24	; 9
   UCSRB = (1<<TXEN);		// Enable transmitter 
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);		// Set frame format: 8data, 2stop bit
  b8:	8e e8       	ldi	r24, 0x8E	; 142
  ba:	80 bd       	out	0x20, r24	; 32
  bc:	08 95       	ret

000000be <uart_putchar>:
}

void uart_putchar(char c) 
{
	while ( !(UCSRA & (1<<UDRE)) )	// Wait for empty transmit buffer 
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <uart_putchar>
	;
    UDR = c;							// Put data into buffer, sends the data 
  c2:	8c b9       	out	0x0c, r24	; 12
  c4:	08 95       	ret

000000c6 <uart_getchar>:
}

char uart_getchar(void) {
    loop_until_bit_is_set(UCSRA, RXC); 	// Wait until data exists
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <uart_getchar>
    return UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
}
  cc:	08 95       	ret

000000ce <uart_putstring>:

void uart_putstring(char tab[])
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	int i =0;
	while (( UCSRA & (1<<UDRE))  == 0){};
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <uart_putstring+0x4>
  d6:	ec 01       	movw	r28, r24
        while (tab[i] != 0x00)
  d8:	89 91       	ld	r24, Y+
  da:	88 23       	and	r24, r24
  dc:	19 f0       	breq	.+6      	; 0xe4 <uart_putstring+0x16>
		{ 
            uart_putchar(tab[i]);
  de:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <uart_putstring+0xa>
			i++; 
        }
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <uart_putint>:

void uart_putint(int value)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	60 97       	sbiw	r28, 0x10	; 16
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
	char tab[16];
	itoa(value,tab,10);
  fe:	4a e0       	ldi	r20, 0x0A	; 10
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	be 01       	movw	r22, r28
 104:	6f 5f       	subi	r22, 0xFF	; 255
 106:	7f 4f       	sbci	r23, 0xFF	; 255
 108:	0e 94 73 01 	call	0x2e6	; 0x2e6 <itoa>
	uart_putstring(tab);
 10c:	ce 01       	movw	r24, r28
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	0e 94 67 00 	call	0xce	; 0xce <uart_putstring>
}
 114:	60 96       	adiw	r28, 0x10	; 16
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <ADC_Init>:

// ------------------------- ADC ----------------------------------------

void ADC_Init()
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz
 126:	86 b1       	in	r24, 0x06	; 6
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0); 	// Set ADC reference to AVCC
 12c:	3e 9a       	sbi	0x07, 6	; 7
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
 12e:	37 9a       	sbi	0x06, 7	; 6
 130:	08 95       	ret

00000132 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)		
{
	channel &= 0x07;					// AND operation with 7 (will keep channel between 0-7) 
	ADMUX = (ADMUX & 0xF8) | channel;	// clears 3 first bits before OR
 132:	97 b1       	in	r25, 0x07	; 7
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	87 70       	andi	r24, 0x07	; 7
 138:	89 2b       	or	r24, r25
 13a:	87 b9       	out	0x07, r24	; 7

	ADCSRA |= (1 << ADSC);				// start single convesrion
 13c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));		// wait for conversion to complete
 13e:	36 99       	sbic	0x06, 6	; 6
 140:	fe cf       	rjmp	.-4      	; 0x13e <ADC_read+0xc>
	return ADCW;
 142:	84 b1       	in	r24, 0x04	; 4
 144:	95 b1       	in	r25, 0x05	; 5
}
 146:	08 95       	ret

00000148 <PORT_Init>:



void PORT_Init()
{
	MCUCSR = (1<<JTD);			//disabling JTAG
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);			//
 14c:	84 bf       	out	0x34, r24	; 52
	DDRD = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 152:	84 bb       	out	0x14, r24	; 20
 154:	08 95       	ret

00000156 <note_on>:
}

void note_on(int key, int oct)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	c8 2f       	mov	r28, r24
 15c:	d6 2f       	mov	r29, r22
	uart_putchar(NOTE_ON_CMD);		// note on
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(key + oct * 12);
 164:	8c 2f       	mov	r24, r28
 166:	9c e0       	ldi	r25, 0x0C	; 12
 168:	d9 9f       	mul	r29, r25
 16a:	80 0d       	add	r24, r0
 16c:	11 24       	eor	r1, r1
 16e:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(VEL_DEF_CMD);
 172:	80 e4       	ldi	r24, 0x40	; 64
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28

void note_on(int key, int oct)
{
	uart_putchar(NOTE_ON_CMD);		// note on
	uart_putchar(key + oct * 12);
	uart_putchar(VEL_DEF_CMD);
 178:	0c 94 5f 00 	jmp	0xbe	; 0xbe <uart_putchar>

0000017c <note_off>:
}

void note_off(int key, int oct)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	c8 2f       	mov	r28, r24
 182:	d6 2f       	mov	r29, r22
	uart_putchar(NOTE_OFF_CMD);		// note off
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(key + oct * 12);
 18a:	8c 2f       	mov	r24, r28
 18c:	9c e0       	ldi	r25, 0x0C	; 12
 18e:	d9 9f       	mul	r29, r25
 190:	80 0d       	add	r24, r0
 192:	11 24       	eor	r1, r1
 194:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putchar>
	uart_putchar(VEL_DEF_CMD);
 198:	80 e4       	ldi	r24, 0x40	; 64
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28

void note_off(int key, int oct)
{
	uart_putchar(NOTE_OFF_CMD);		// note off
	uart_putchar(key + oct * 12);
	uart_putchar(VEL_DEF_CMD);
 19e:	0c 94 5f 00 	jmp	0xbe	; 0xbe <uart_putchar>

000001a2 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
	//uart_putint(adc_1);

	// adc_6 = ADC_read(6);
	// uart_putstring("\nADC6:");
	// uart_putint(adc_6);
}
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:

// ------------------------- MAIN ----------------------------------------

int main(void)
{
	USART_Init(MYUBRR);
 1b6:	8f e1       	ldi	r24, 0x1F	; 31
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_Init>
	PORT_Init();
 1be:	0e 94 a4 00 	call	0x148	; 0x148 <PORT_Init>
	ADC_Init();
 1c2:	0e 94 93 00 	call	0x126	; 0x126 <ADC_Init>
	TIM1_Init();
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <TIM1_Init>
			{
				PORTD |= (1<<NOTES_tab[i]);
			}
			else		// PORTC
			{
				PORTC |= (1<<NOTES_tab[i]);
 1ca:	cc 24       	eor	r12, r12
 1cc:	c3 94       	inc	r12
 1ce:	d1 2c       	mov	r13, r1
 1d0:	08 e6       	ldi	r16, 0x68	; 104
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	98 e8       	ldi	r25, 0x88	; 136
 1d6:	69 2e       	mov	r6, r25
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	79 2e       	mov	r7, r25
		//uart_putstring("\nADC1:")
		//uart_putint(adc_1);

		// ----- keyboard handle -> working without last key --------

		for(int i=0; i<13; i++)		// notes loop
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(i < 7)	// PORTD
 1e0:	c7 30       	cpi	r28, 0x07	; 7
 1e2:	d1 05       	cpc	r29, r1
 1e4:	64 f4       	brge	.+24     	; 0x1fe <main+0x48>
			{
				PORTD |= (1<<NOTES_tab[i]);
 1e6:	22 b3       	in	r18, 0x12	; 18
 1e8:	c6 01       	movw	r24, r12
 1ea:	f8 01       	movw	r30, r16
 1ec:	00 80       	ld	r0, Z
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <main+0x3e>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <main+0x3a>
 1f8:	82 2b       	or	r24, r18
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	0b c0       	rjmp	.+22     	; 0x214 <main+0x5e>
			}
			else		// PORTC
			{
				PORTC |= (1<<NOTES_tab[i]);
 1fe:	25 b3       	in	r18, 0x15	; 21
 200:	c6 01       	movw	r24, r12
 202:	f8 01       	movw	r30, r16
 204:	00 80       	ld	r0, Z
 206:	02 c0       	rjmp	.+4      	; 0x20c <main+0x56>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <main+0x52>
 210:	82 2b       	or	r24, r18
 212:	85 bb       	out	0x15, r24	; 21
 214:	80 e6       	ldi	r24, 0x60	; 96
 216:	a8 2e       	mov	r10, r24
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	b8 2e       	mov	r11, r24
		//uart_putstring("\nADC1:")
		//uart_putint(adc_1);

		// ----- keyboard handle -> working without last key --------

		for(int i=0; i<13; i++)		// notes loop
 21c:	73 01       	movw	r14, r6
 21e:	81 2c       	mov	r8, r1
 220:	91 2c       	mov	r9, r1
			// 	}
			// }

			for(int j=0; j<4; j++)		// octaves loop
			{
				if( PINB & (1<<OCTAVES_tab[j]) && !(PRESSED_BUTTON_tab[i][j]) )
 222:	86 b3       	in	r24, 0x16	; 22
 224:	f5 01       	movw	r30, r10
 226:	20 81       	ld	r18, Z
 228:	f2 e0       	ldi	r31, 0x02	; 2
 22a:	af 0e       	add	r10, r31
 22c:	b1 1c       	adc	r11, r1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <main+0x82>
 234:	95 95       	asr	r25
 236:	87 95       	ror	r24
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <main+0x7e>
 23c:	80 ff       	sbrs	r24, 0
 23e:	0c c0       	rjmp	.+24     	; 0x258 <main+0xa2>
 240:	f7 01       	movw	r30, r14
 242:	80 81       	ld	r24, Z
 244:	91 81       	ldd	r25, Z+1	; 0x01
 246:	89 2b       	or	r24, r25
 248:	39 f4       	brne	.+14     	; 0x258 <main+0xa2>
				{
					PRESSED_BUTTON_tab[i][j] = 1;
 24a:	d1 82       	std	Z+1, r13	; 0x01
 24c:	c0 82       	st	Z, r12
					note_on(i,j);
 24e:	b4 01       	movw	r22, r8
 250:	ce 01       	movw	r24, r28
 252:	0e 94 ab 00 	call	0x156	; 0x156 <note_on>
 256:	14 c0       	rjmp	.+40     	; 0x280 <main+0xca>
				}
				else if( !(PINB & (1<<OCTAVES_tab[j])) && PRESSED_BUTTON_tab[i][j] )
 258:	86 b3       	in	r24, 0x16	; 22
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <main+0xac>
 25e:	95 95       	asr	r25
 260:	87 95       	ror	r24
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <main+0xa8>
 266:	80 fd       	sbrc	r24, 0
 268:	0b c0       	rjmp	.+22     	; 0x280 <main+0xca>
 26a:	f7 01       	movw	r30, r14
 26c:	80 81       	ld	r24, Z
 26e:	91 81       	ldd	r25, Z+1	; 0x01
 270:	89 2b       	or	r24, r25
 272:	31 f0       	breq	.+12     	; 0x280 <main+0xca>
				{
					PRESSED_BUTTON_tab[i][j] = 0;
 274:	11 82       	std	Z+1, r1	; 0x01
 276:	10 82       	st	Z, r1
					note_off(i,j);
 278:	b4 01       	movw	r22, r8
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 be 00 	call	0x17c	; 0x17c <note_off>
			// 		PRESSED_BUTTON_tab[12][0] = 0;
			// 		note_off(12,0);
			// 	}
			// }

			for(int j=0; j<4; j++)		// octaves loop
 280:	ff ef       	ldi	r31, 0xFF	; 255
 282:	8f 1a       	sub	r8, r31
 284:	9f 0a       	sbc	r9, r31
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	e8 0e       	add	r14, r24
 28a:	f1 1c       	adc	r15, r1
 28c:	94 e0       	ldi	r25, 0x04	; 4
 28e:	89 16       	cp	r8, r25
 290:	91 04       	cpc	r9, r1
 292:	39 f6       	brne	.-114    	; 0x222 <main+0x6c>
					PRESSED_BUTTON_tab[i][j] = 0;
					note_off(i,j);
				}
			}
			
			if(i < 7)	// PORTD
 294:	c7 30       	cpi	r28, 0x07	; 7
 296:	d1 05       	cpc	r29, r1
 298:	74 f4       	brge	.+28     	; 0x2b6 <main+0x100>
			{
				PORTD &= ~(1<<NOTES_tab[i]);
 29a:	92 b3       	in	r25, 0x12	; 18
 29c:	96 01       	movw	r18, r12
 29e:	f8 01       	movw	r30, r16
 2a0:	00 80       	ld	r0, Z
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <main+0xf2>
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <main+0xee>
 2ac:	82 2f       	mov	r24, r18
 2ae:	80 95       	com	r24
 2b0:	89 23       	and	r24, r25
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <main+0x11a>
			}
			else		// PORT C
			{
				PORTC &= ~(1<<NOTES_tab[i]);
 2b6:	95 b3       	in	r25, 0x15	; 21
 2b8:	96 01       	movw	r18, r12
 2ba:	f8 01       	movw	r30, r16
 2bc:	00 80       	ld	r0, Z
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <main+0x10e>
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <main+0x10a>
 2c8:	82 2f       	mov	r24, r18
 2ca:	80 95       	com	r24
 2cc:	89 23       	and	r24, r25
 2ce:	85 bb       	out	0x15, r24	; 21
		//uart_putstring("\nADC1:")
		//uart_putint(adc_1);

		// ----- keyboard handle -> working without last key --------

		for(int i=0; i<13; i++)		// notes loop
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	0e 5f       	subi	r16, 0xFE	; 254
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
 2d6:	f8 e0       	ldi	r31, 0x08	; 8
 2d8:	6f 0e       	add	r6, r31
 2da:	71 1c       	adc	r7, r1
 2dc:	cd 30       	cpi	r28, 0x0D	; 13
 2de:	d1 05       	cpc	r29, r1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <main+0x12e>
 2e2:	7e cf       	rjmp	.-260    	; 0x1e0 <main+0x2a>
 2e4:	75 cf       	rjmp	.-278    	; 0x1d0 <main+0x1a>

000002e6 <itoa>:
 2e6:	45 32       	cpi	r20, 0x25	; 37
 2e8:	51 05       	cpc	r21, r1
 2ea:	20 f4       	brcc	.+8      	; 0x2f4 <itoa+0xe>
 2ec:	42 30       	cpi	r20, 0x02	; 2
 2ee:	10 f0       	brcs	.+4      	; 0x2f4 <itoa+0xe>
 2f0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__itoa_ncheck>
 2f4:	fb 01       	movw	r30, r22
 2f6:	10 82       	st	Z, r1
 2f8:	cb 01       	movw	r24, r22
 2fa:	08 95       	ret

000002fc <__itoa_ncheck>:
 2fc:	bb 27       	eor	r27, r27
 2fe:	4a 30       	cpi	r20, 0x0A	; 10
 300:	31 f4       	brne	.+12     	; 0x30e <__itoa_ncheck+0x12>
 302:	99 23       	and	r25, r25
 304:	22 f4       	brpl	.+8      	; 0x30e <__itoa_ncheck+0x12>
 306:	bd e2       	ldi	r27, 0x2D	; 45
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	0c 94 8a 01 	jmp	0x314	; 0x314 <__utoa_common>

00000312 <__utoa_ncheck>:
 312:	bb 27       	eor	r27, r27

00000314 <__utoa_common>:
 314:	fb 01       	movw	r30, r22
 316:	55 27       	eor	r21, r21
 318:	aa 27       	eor	r26, r26
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	aa 1f       	adc	r26, r26
 320:	a4 17       	cp	r26, r20
 322:	10 f0       	brcs	.+4      	; 0x328 <__utoa_common+0x14>
 324:	a4 1b       	sub	r26, r20
 326:	83 95       	inc	r24
 328:	50 51       	subi	r21, 0x10	; 16
 32a:	b9 f7       	brne	.-18     	; 0x31a <__utoa_common+0x6>
 32c:	a0 5d       	subi	r26, 0xD0	; 208
 32e:	aa 33       	cpi	r26, 0x3A	; 58
 330:	08 f0       	brcs	.+2      	; 0x334 <__utoa_common+0x20>
 332:	a9 5d       	subi	r26, 0xD9	; 217
 334:	a1 93       	st	Z+, r26
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	79 f7       	brne	.-34     	; 0x318 <__utoa_common+0x4>
 33a:	b1 11       	cpse	r27, r1
 33c:	b1 93       	st	Z+, r27
 33e:	11 92       	st	Z+, r1
 340:	cb 01       	movw	r24, r22
 342:	0c 94 a3 01 	jmp	0x346	; 0x346 <strrev>

00000346 <strrev>:
 346:	dc 01       	movw	r26, r24
 348:	fc 01       	movw	r30, r24
 34a:	67 2f       	mov	r22, r23
 34c:	71 91       	ld	r23, Z+
 34e:	77 23       	and	r23, r23
 350:	e1 f7       	brne	.-8      	; 0x34a <strrev+0x4>
 352:	32 97       	sbiw	r30, 0x02	; 2
 354:	04 c0       	rjmp	.+8      	; 0x35e <strrev+0x18>
 356:	7c 91       	ld	r23, X
 358:	6d 93       	st	X+, r22
 35a:	70 83       	st	Z, r23
 35c:	62 91       	ld	r22, -Z
 35e:	ae 17       	cp	r26, r30
 360:	bf 07       	cpc	r27, r31
 362:	c8 f3       	brcs	.-14     	; 0x356 <strrev+0x10>
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
