
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  0080008e  0080008e  000003ae  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ce  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000699  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e2  00000000  00000000  0000138b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f5  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3f       	cpi	r26, 0xF6	; 246
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  8a:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PORT_Init>:
int OCTAVES_tab[4] = {octave1,octave2,octave3,octave4};
int PRESSED_BUTTON_tab[13][4]={0};

void PORT_Init()
{
	MCUCSR = (1<<JTD);			//disabling JTAG
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);			//
  96:	84 bf       	out	0x34, r24	; 52
	DDRD = 0xFF;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  9c:	84 bb       	out	0x14, r24	; 20
  9e:	08 95       	ret

000000a0 <USART_Init>:
}

void USART_Init(unsigned int ubrr)		
{
   UBRRH = (unsigned char)(ubrr>>8);	// set baud rate to 9600
  a0:	90 bd       	out	0x20, r25	; 32
   UBRRL = (unsigned char)ubrr;		//
  a2:	89 b9       	out	0x09, r24	; 9
   UCSRB = (1<<TXEN);		// Enable transmitter 
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);		// Set frame format: 8data, 2stop bit
  a8:	8e e8       	ldi	r24, 0x8E	; 142
  aa:	80 bd       	out	0x20, r24	; 32
  ac:	08 95       	ret

000000ae <uart_putchar>:
}

void uart_putchar(char c) 
{
	while ( !(UCSRA & (1<<UDRE)) )	// Wait for empty transmit buffer 
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <uart_putchar>
	;
    UDR = c;							// Put data into buffer, sends the data 
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <uart_getchar>:
}

char uart_getchar(void) {
    loop_until_bit_is_set(UCSRA, RXC); 	// Wait until data exists
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <uart_getchar>
    return UDR;
  ba:	8c b1       	in	r24, 0x0c	; 12
}
  bc:	08 95       	ret

000000be <uart_putstring>:

void uart_putstring(char tab[])
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
	int i =0;
	while (( UCSRA & (1<<UDRE))  == 0){};
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <uart_putstring+0x4>
  c6:	ec 01       	movw	r28, r24
        while (tab[i] != 0x00)
  c8:	89 91       	ld	r24, Y+
  ca:	88 23       	and	r24, r24
  cc:	19 f0       	breq	.+6      	; 0xd4 <uart_putstring+0x16>
		{ 
            uart_putchar(tab[i]);
  ce:	0e 94 57 00 	call	0xae	; 0xae <uart_putchar>
  d2:	fa cf       	rjmp	.-12     	; 0xc8 <uart_putstring+0xa>
			i++; 
        }
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <uart_putint>:

void uart_putint(int value)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	60 97       	sbiw	r28, 0x10	; 16
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	char tab[16];
	itoa(value,tab,10);
  ee:	4a e0       	ldi	r20, 0x0A	; 10
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	be 01       	movw	r22, r28
  f4:	6f 5f       	subi	r22, 0xFF	; 255
  f6:	7f 4f       	sbci	r23, 0xFF	; 255
  f8:	0e 94 34 01 	call	0x268	; 0x268 <itoa>
	uart_putstring(tab);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putstring>
}
 104:	60 96       	adiw	r28, 0x10	; 16
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <note_on>:

void note_on(int key, int oct)
{
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	8c 01       	movw	r16, r24
 120:	eb 01       	movw	r28, r22
	//uart_putchar('N');
	//uart_putchar('-');
	uart_putstring("\nkey:");
 122:	82 e8       	ldi	r24, 0x82	; 130
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putstring>
	uart_putint(key);
 12a:	c8 01       	movw	r24, r16
 12c:	0e 94 6d 00 	call	0xda	; 0xda <uart_putint>
	//uart_putchar('O');
	//uart_putchar('-');
	uart_putstring("\noct");
 130:	88 e8       	ldi	r24, 0x88	; 136
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_putstring>
	uart_putint(oct);
 138:	ce 01       	movw	r24, r28
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
	uart_putstring("\nkey:");
	uart_putint(key);
	//uart_putchar('O');
	//uart_putchar('-');
	uart_putstring("\noct");
	uart_putint(oct);
 142:	0c 94 6d 00 	jmp	0xda	; 0xda <uart_putint>

00000146 <note_off>:
}

void note_off(int key, int oct)
{
 146:	08 95       	ret

00000148 <main>:

}

int main(void)
{
	USART_Init(MYUBRR);
 148:	87 e6       	ldi	r24, 0x67	; 103
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Init>
	PORT_Init();
 150:	0e 94 49 00 	call	0x92	; 0x92 <PORT_Init>
			{
				PORTD |= (1<<NOTES_tab[i]);
			}
			else		// PORTC
			{
				PORTC |= (1<<NOTES_tab[i]);
 154:	cc 24       	eor	r12, r12
 156:	c3 94       	inc	r12
 158:	d1 2c       	mov	r13, r1
 15a:	08 e6       	ldi	r16, 0x68	; 104
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	9e e8       	ldi	r25, 0x8E	; 142
 160:	69 2e       	mov	r6, r25
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	79 2e       	mov	r7, r25
	PORT_Init();

	while(1)
	{
		
		for(int i=0; i<13; i++)		// notes loop
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(i < 7)	// PORTD
 16a:	c7 30       	cpi	r28, 0x07	; 7
 16c:	d1 05       	cpc	r29, r1
 16e:	64 f4       	brge	.+24     	; 0x188 <main+0x40>
			{
				PORTD |= (1<<NOTES_tab[i]);
 170:	22 b3       	in	r18, 0x12	; 18
 172:	c6 01       	movw	r24, r12
 174:	f8 01       	movw	r30, r16
 176:	00 80       	ld	r0, Z
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0x36>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <main+0x32>
 182:	82 2b       	or	r24, r18
 184:	82 bb       	out	0x12, r24	; 18
 186:	0b c0       	rjmp	.+22     	; 0x19e <main+0x56>
			}
			else		// PORTC
			{
				PORTC |= (1<<NOTES_tab[i]);
 188:	25 b3       	in	r18, 0x15	; 21
 18a:	c6 01       	movw	r24, r12
 18c:	f8 01       	movw	r30, r16
 18e:	00 80       	ld	r0, Z
 190:	02 c0       	rjmp	.+4      	; 0x196 <main+0x4e>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <main+0x4a>
 19a:	82 2b       	or	r24, r18
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	88 2e       	mov	r8, r24
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	98 2e       	mov	r9, r24
	PORT_Init();

	while(1)
	{
		
		for(int i=0; i<13; i++)		// notes loop
 1a6:	73 01       	movw	r14, r6
 1a8:	a1 2c       	mov	r10, r1
 1aa:	b1 2c       	mov	r11, r1
			// 	}
			// }

			for(int j=0; j<4; j++)		// octaves loop
			{
				if( PINB & (1<<OCTAVES_tab[j]) && !(PRESSED_BUTTON_tab[i][j]) )
 1ac:	86 b3       	in	r24, 0x16	; 22
 1ae:	f4 01       	movw	r30, r8
 1b0:	20 81       	ld	r18, Z
 1b2:	f2 e0       	ldi	r31, 0x02	; 2
 1b4:	8f 0e       	add	r8, r31
 1b6:	91 1c       	adc	r9, r1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x7a>
 1be:	95 95       	asr	r25
 1c0:	87 95       	ror	r24
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <main+0x76>
 1c6:	80 ff       	sbrs	r24, 0
 1c8:	0c c0       	rjmp	.+24     	; 0x1e2 <main+0x9a>
 1ca:	f7 01       	movw	r30, r14
 1cc:	80 81       	ld	r24, Z
 1ce:	91 81       	ldd	r25, Z+1	; 0x01
 1d0:	89 2b       	or	r24, r25
 1d2:	39 f4       	brne	.+14     	; 0x1e2 <main+0x9a>
				{
					PRESSED_BUTTON_tab[i][j] = 1;
 1d4:	d1 82       	std	Z+1, r13	; 0x01
 1d6:	c0 82       	st	Z, r12
					note_on(i,j);
 1d8:	b5 01       	movw	r22, r10
 1da:	ce 01       	movw	r24, r28
 1dc:	0e 94 8b 00 	call	0x116	; 0x116 <note_on>
 1e0:	10 c0       	rjmp	.+32     	; 0x202 <main+0xba>
				}
				else if( !(PINB & (1<<OCTAVES_tab[j])) && PRESSED_BUTTON_tab[i][j] )
 1e2:	86 b3       	in	r24, 0x16	; 22
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <main+0xa4>
 1e8:	95 95       	asr	r25
 1ea:	87 95       	ror	r24
 1ec:	2a 95       	dec	r18
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <main+0xa0>
 1f0:	80 fd       	sbrc	r24, 0
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <main+0xba>
 1f4:	f7 01       	movw	r30, r14
 1f6:	80 81       	ld	r24, Z
 1f8:	91 81       	ldd	r25, Z+1	; 0x01
 1fa:	89 2b       	or	r24, r25
 1fc:	11 f0       	breq	.+4      	; 0x202 <main+0xba>
				{
					PRESSED_BUTTON_tab[i][j] = 0;
 1fe:	11 82       	std	Z+1, r1	; 0x01
 200:	10 82       	st	Z, r1
			// 		PRESSED_BUTTON_tab[12][0] = 0;
			// 		note_off(12,0);
			// 	}
			// }

			for(int j=0; j<4; j++)		// octaves loop
 202:	ff ef       	ldi	r31, 0xFF	; 255
 204:	af 1a       	sub	r10, r31
 206:	bf 0a       	sbc	r11, r31
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	e8 0e       	add	r14, r24
 20c:	f1 1c       	adc	r15, r1
 20e:	94 e0       	ldi	r25, 0x04	; 4
 210:	a9 16       	cp	r10, r25
 212:	b1 04       	cpc	r11, r1
 214:	59 f6       	brne	.-106    	; 0x1ac <main+0x64>
					PRESSED_BUTTON_tab[i][j] = 0;
					note_off(i,j);
				}
			}
			
			if(i < 7)	// PORTD
 216:	c7 30       	cpi	r28, 0x07	; 7
 218:	d1 05       	cpc	r29, r1
 21a:	74 f4       	brge	.+28     	; 0x238 <main+0xf0>
			{
				PORTD &= ~(1<<NOTES_tab[i]);
 21c:	92 b3       	in	r25, 0x12	; 18
 21e:	96 01       	movw	r18, r12
 220:	f8 01       	movw	r30, r16
 222:	00 80       	ld	r0, Z
 224:	02 c0       	rjmp	.+4      	; 0x22a <main+0xe2>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <main+0xde>
 22e:	82 2f       	mov	r24, r18
 230:	80 95       	com	r24
 232:	89 23       	and	r24, r25
 234:	82 bb       	out	0x12, r24	; 18
 236:	0d c0       	rjmp	.+26     	; 0x252 <main+0x10a>
			}
			else		// PORT C
			{
				PORTC &= ~(1<<NOTES_tab[i]);
 238:	95 b3       	in	r25, 0x15	; 21
 23a:	96 01       	movw	r18, r12
 23c:	f8 01       	movw	r30, r16
 23e:	00 80       	ld	r0, Z
 240:	02 c0       	rjmp	.+4      	; 0x246 <main+0xfe>
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <main+0xfa>
 24a:	82 2f       	mov	r24, r18
 24c:	80 95       	com	r24
 24e:	89 23       	and	r24, r25
 250:	85 bb       	out	0x15, r24	; 21
	PORT_Init();

	while(1)
	{
		
		for(int i=0; i<13; i++)		// notes loop
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	0e 5f       	subi	r16, 0xFE	; 254
 256:	1f 4f       	sbci	r17, 0xFF	; 255
 258:	f8 e0       	ldi	r31, 0x08	; 8
 25a:	6f 0e       	add	r6, r31
 25c:	71 1c       	adc	r7, r1
 25e:	cd 30       	cpi	r28, 0x0D	; 13
 260:	d1 05       	cpc	r29, r1
 262:	09 f0       	breq	.+2      	; 0x266 <main+0x11e>
 264:	82 cf       	rjmp	.-252    	; 0x16a <main+0x22>
 266:	79 cf       	rjmp	.-270    	; 0x15a <main+0x12>

00000268 <itoa>:
 268:	45 32       	cpi	r20, 0x25	; 37
 26a:	51 05       	cpc	r21, r1
 26c:	20 f4       	brcc	.+8      	; 0x276 <itoa+0xe>
 26e:	42 30       	cpi	r20, 0x02	; 2
 270:	10 f0       	brcs	.+4      	; 0x276 <itoa+0xe>
 272:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__itoa_ncheck>
 276:	fb 01       	movw	r30, r22
 278:	10 82       	st	Z, r1
 27a:	cb 01       	movw	r24, r22
 27c:	08 95       	ret

0000027e <__itoa_ncheck>:
 27e:	bb 27       	eor	r27, r27
 280:	4a 30       	cpi	r20, 0x0A	; 10
 282:	31 f4       	brne	.+12     	; 0x290 <__itoa_ncheck+0x12>
 284:	99 23       	and	r25, r25
 286:	22 f4       	brpl	.+8      	; 0x290 <__itoa_ncheck+0x12>
 288:	bd e2       	ldi	r27, 0x2D	; 45
 28a:	90 95       	com	r25
 28c:	81 95       	neg	r24
 28e:	9f 4f       	sbci	r25, 0xFF	; 255
 290:	0c 94 4b 01 	jmp	0x296	; 0x296 <__utoa_common>

00000294 <__utoa_ncheck>:
 294:	bb 27       	eor	r27, r27

00000296 <__utoa_common>:
 296:	fb 01       	movw	r30, r22
 298:	55 27       	eor	r21, r21
 29a:	aa 27       	eor	r26, r26
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	aa 1f       	adc	r26, r26
 2a2:	a4 17       	cp	r26, r20
 2a4:	10 f0       	brcs	.+4      	; 0x2aa <__utoa_common+0x14>
 2a6:	a4 1b       	sub	r26, r20
 2a8:	83 95       	inc	r24
 2aa:	50 51       	subi	r21, 0x10	; 16
 2ac:	b9 f7       	brne	.-18     	; 0x29c <__utoa_common+0x6>
 2ae:	a0 5d       	subi	r26, 0xD0	; 208
 2b0:	aa 33       	cpi	r26, 0x3A	; 58
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <__utoa_common+0x20>
 2b4:	a9 5d       	subi	r26, 0xD9	; 217
 2b6:	a1 93       	st	Z+, r26
 2b8:	00 97       	sbiw	r24, 0x00	; 0
 2ba:	79 f7       	brne	.-34     	; 0x29a <__utoa_common+0x4>
 2bc:	b1 11       	cpse	r27, r1
 2be:	b1 93       	st	Z+, r27
 2c0:	11 92       	st	Z+, r1
 2c2:	cb 01       	movw	r24, r22
 2c4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <strrev>

000002c8 <strrev>:
 2c8:	dc 01       	movw	r26, r24
 2ca:	fc 01       	movw	r30, r24
 2cc:	67 2f       	mov	r22, r23
 2ce:	71 91       	ld	r23, Z+
 2d0:	77 23       	and	r23, r23
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <strrev+0x4>
 2d4:	32 97       	sbiw	r30, 0x02	; 2
 2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <strrev+0x18>
 2d8:	7c 91       	ld	r23, X
 2da:	6d 93       	st	X+, r22
 2dc:	70 83       	st	Z, r23
 2de:	62 91       	ld	r22, -Z
 2e0:	ae 17       	cp	r26, r30
 2e2:	bf 07       	cpc	r27, r31
 2e4:	c8 f3       	brcs	.-14     	; 0x2d8 <strrev+0x10>
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
