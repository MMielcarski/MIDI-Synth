
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  000003b0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b5  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c8  00000000  00000000  00000d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f3  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000290  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000259  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 03 01 	call	0x206	; 0x206 <main>
  9e:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initializeSetup>:

		//note_DDR = note_1 | note_2 | note_3 | note_4;		// note keys as output
		//button_DDR = button_1 | button_2;					// button keys as output

	//note_PORT = note_1 | note_2 | note_3 | note_4;	// note keys with pullup
	DDRD = 0;
  a6:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1 << PD0) | (1 << PD2);	// note_1 with pullup
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	08 95       	ret

000000ae <ADC_init>:
	//button_PORT = button_1 | button_2;				// button keys with pullup	
}

void ADC_init (void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0); 	// Set ADC reference to AVCC
  b8:	ac e7       	ldi	r26, 0x7C	; 124
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	8c 91       	ld	r24, X
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); 	// Left adjust ADC result to allow easy 8 bit reading
  c2:	8c 91       	ld	r24, X
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	8c 93       	st	X, r24

	ADCSRA |= (1 << ADEN);  // Enable ADC
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);	// for free running mode
  d4:	80 81       	ld	r24, Z
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  dc:	80 ff       	sbrs	r24, 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  e0:	29 9a       	sbi	0x05, 1	; 5
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  e4:	29 98       	cbi	0x05, 1	; 5

if(nibbleToWrite & 0x02)
  e6:	81 ff       	sbrs	r24, 1
  e8:	02 c0       	rjmp	.+4      	; 0xee <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  ea:	2a 9a       	sbi	0x05, 2	; 5
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  ee:	2a 98       	cbi	0x05, 2	; 5

if(nibbleToWrite & 0x04)
  f0:	82 ff       	sbrs	r24, 2
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  f4:	2b 9a       	sbi	0x05, 3	; 5
  f6:	01 c0       	rjmp	.+2      	; 0xfa <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  f8:	2b 98       	cbi	0x05, 3	; 5

if(nibbleToWrite & 0x08)
  fa:	83 ff       	sbrs	r24, 3
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  fe:	2c 9a       	sbi	0x05, 4	; 5
 100:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 102:	2c 98       	cbi	0x05, 4	; 5
 104:	08 95       	ret

00000106 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
 10a:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite >> 4);
 10c:	82 95       	swap	r24
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	0e 94 6e 00 	call	0xdc	; 0xdc <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 114:	28 98       	cbi	0x05, 0	; 5
LCD_E_PORT |= LCD_E;
 116:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 11e:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	87 ec       	ldi	r24, 0xC7	; 199
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <_LCD_Write+0x1e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <_LCD_Write+0x24>
 12a:	00 00       	nop
_delay_us(50);
}
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 130:	5f 98       	cbi	0x0b, 7	; 11
_LCD_Write(commandToWrite);
 132:	0c 94 83 00 	jmp	0x106	; 0x106 <_LCD_Write>

00000136 <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
 136:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_Write(dataToWrite);
 138:	0c 94 83 00 	jmp	0x106	; 0x106 <_LCD_Write>

0000013c <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
while(*text)
 142:	89 91       	ld	r24, Y+
 144:	88 23       	and	r24, r24
 146:	19 f0       	breq	.+6      	; 0x14e <LCD_WriteText+0x12>
  LCD_WriteData(*text++);
 148:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WriteData>
 14c:	fa cf       	rjmp	.-12     	; 0x142 <LCD_WriteText+0x6>
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 154:	90 e4       	ldi	r25, 0x40	; 64
 156:	69 9f       	mul	r22, r25
 158:	80 0d       	add	r24, r0
 15a:	11 24       	eor	r1, r1
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	0c 94 98 00 	jmp	0x130	; 0x130 <LCD_WriteCommand>

00000162 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 98 00 	call	0x130	; 0x130 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9f e1       	ldi	r25, 0x1F	; 31
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Clear+0xa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Clear+0x10>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_Home>:
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
LCD_WriteCommand(HD44780_HOME);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 98 00 	call	0x130	; 0x130 <LCD_WriteCommand>
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9f e1       	ldi	r25, 0x1F	; 31
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_Home+0xa>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_Home+0x10>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 18a:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 18c:	21 9a       	sbi	0x04, 1	; 4
LCD_DB5_DIR |= LCD_DB5; //
 18e:	22 9a       	sbi	0x04, 2	; 4
LCD_DB6_DIR |= LCD_DB6; //
 190:	23 9a       	sbi	0x04, 3	; 4
LCD_DB7_DIR |= LCD_DB7; //
 192:	24 9a       	sbi	0x04, 4	; 4
LCD_E_DIR 	|= LCD_E;   //
 194:	20 9a       	sbi	0x04, 0	; 4
LCD_RS_DIR 	|= LCD_RS;  //
 196:	57 9a       	sbi	0x0a, 7	; 10
 198:	8f e5       	ldi	r24, 0x5F	; 95
 19a:	9a ee       	ldi	r25, 0xEA	; 234
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Initalize+0x12>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Initalize+0x18>
 1a2:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 1a4:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 1a6:	28 98       	cbi	0x05, 0	; 5
 1a8:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 1aa:	28 9a       	sbi	0x05, 0	; 5
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 6e 00 	call	0xdc	; 0xdc <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 1b2:	28 98       	cbi	0x05, 0	; 5
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	9e e4       	ldi	r25, 0x4E	; 78
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Initalize+0x2e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Initalize+0x34>
 1be:	00 00       	nop
 1c0:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 1c2:	99 f7       	brne	.-26     	; 0x1aa <LCD_Initalize+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 1c4:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(0x02); // tryb 4-bitowy
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 6e 00 	call	0xdc	; 0xdc <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 1cc:	28 98       	cbi	0x05, 0	; 5
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_Initalize+0x48>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_Initalize+0x4e>
 1d8:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 1da:	88 e2       	ldi	r24, 0x28	; 40
 1dc:	0e 94 98 00 	call	0x130	; 0x130 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	0e 94 98 00 	call	0x130	; 0x130 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 98 00 	call	0x130	; 0x130 <LCD_WriteCommand>
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	9f e1       	ldi	r25, 0x1F	; 31
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_Initalize+0x66>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_Initalize+0x6c>
 1f6:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 98 00 	call	0x130	; 0x130 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
}
 200:	cf 91       	pop	r28
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 202:	0c 94 98 00 	jmp	0x130	; 0x130 <LCD_WriteCommand>

00000206 <main>:
// ATmega 328p

#include "aux.h"

int main(void)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	00 d0       	rcall	.+0      	; 0x20c <main+0x6>
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
    LCD_Initalize();
 212:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_Initalize>
    ADC_init();
 216:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
    int adc_read = 0;
    char adc_display[3];

	while(1)
	{
        adc_read = ADCW/100;
 21a:	04 e6       	ldi	r16, 0x64	; 100
 21c:	10 e0       	ldi	r17, 0x00	; 0
 21e:	80 91 78 00 	lds	r24, 0x0078
 222:	90 91 79 00 	lds	r25, 0x0079
 226:	b8 01       	movw	r22, r16
 228:	0e 94 3a 01 	call	0x274	; 0x274 <__udivmodhi4>
 22c:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 22e:	4a e0       	ldi	r20, 0x0A	; 10
 230:	be 01       	movw	r22, r28
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	0e 94 4e 01 	call	0x29c	; 0x29c <__itoa_ncheck>

        itoa(adc_read,adc_display,10);  // conversion from int to char array with number

        LCD_GoTo(0,0);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_GoTo>
        LCD_WriteText(adc_display);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteText>

        //if(ADCW > 128)
        //LCD_WriteText("jadymy!");


        if(!(note_PIN & note_1))
 24a:	48 99       	sbic	0x09, 0	; 9
 24c:	08 c0       	rjmp	.+16     	; 0x25e <main+0x58>
        {
            LCD_GoTo(0,1);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_GoTo>
            LCD_WriteText("button 1");
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteText>
        }

        if(!(note_PIN & note_2))
 25e:	4a 99       	sbic	0x09, 2	; 9
 260:	de cf       	rjmp	.-68     	; 0x21e <main+0x18>
        {
            LCD_GoTo(0,1);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_GoTo>
            LCD_WriteText("button 2");
 26a:	89 e0       	ldi	r24, 0x09	; 9
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_WriteText>
 272:	d5 cf       	rjmp	.-86     	; 0x21e <main+0x18>

00000274 <__udivmodhi4>:
 274:	aa 1b       	sub	r26, r26
 276:	bb 1b       	sub	r27, r27
 278:	51 e1       	ldi	r21, 0x11	; 17
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__udivmodhi4_ep>

0000027c <__udivmodhi4_loop>:
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	a6 17       	cp	r26, r22
 282:	b7 07       	cpc	r27, r23
 284:	10 f0       	brcs	.+4      	; 0x28a <__udivmodhi4_ep>
 286:	a6 1b       	sub	r26, r22
 288:	b7 0b       	sbc	r27, r23

0000028a <__udivmodhi4_ep>:
 28a:	88 1f       	adc	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	5a 95       	dec	r21
 290:	a9 f7       	brne	.-22     	; 0x27c <__udivmodhi4_loop>
 292:	80 95       	com	r24
 294:	90 95       	com	r25
 296:	bc 01       	movw	r22, r24
 298:	cd 01       	movw	r24, r26
 29a:	08 95       	ret

0000029c <__itoa_ncheck>:
 29c:	bb 27       	eor	r27, r27
 29e:	4a 30       	cpi	r20, 0x0A	; 10
 2a0:	31 f4       	brne	.+12     	; 0x2ae <__itoa_ncheck+0x12>
 2a2:	99 23       	and	r25, r25
 2a4:	22 f4       	brpl	.+8      	; 0x2ae <__itoa_ncheck+0x12>
 2a6:	bd e2       	ldi	r27, 0x2D	; 45
 2a8:	90 95       	com	r25
 2aa:	81 95       	neg	r24
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__utoa_common>

000002b2 <__utoa_ncheck>:
 2b2:	bb 27       	eor	r27, r27

000002b4 <__utoa_common>:
 2b4:	fb 01       	movw	r30, r22
 2b6:	55 27       	eor	r21, r21
 2b8:	aa 27       	eor	r26, r26
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	aa 1f       	adc	r26, r26
 2c0:	a4 17       	cp	r26, r20
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <__utoa_common+0x14>
 2c4:	a4 1b       	sub	r26, r20
 2c6:	83 95       	inc	r24
 2c8:	50 51       	subi	r21, 0x10	; 16
 2ca:	b9 f7       	brne	.-18     	; 0x2ba <__utoa_common+0x6>
 2cc:	a0 5d       	subi	r26, 0xD0	; 208
 2ce:	aa 33       	cpi	r26, 0x3A	; 58
 2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__utoa_common+0x20>
 2d2:	a9 5d       	subi	r26, 0xD9	; 217
 2d4:	a1 93       	st	Z+, r26
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	79 f7       	brne	.-34     	; 0x2b8 <__utoa_common+0x4>
 2da:	b1 11       	cpse	r27, r1
 2dc:	b1 93       	st	Z+, r27
 2de:	11 92       	st	Z+, r1
 2e0:	cb 01       	movw	r24, r22
 2e2:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <strrev>

000002e6 <strrev>:
 2e6:	dc 01       	movw	r26, r24
 2e8:	fc 01       	movw	r30, r24
 2ea:	67 2f       	mov	r22, r23
 2ec:	71 91       	ld	r23, Z+
 2ee:	77 23       	and	r23, r23
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <strrev+0x4>
 2f2:	32 97       	sbiw	r30, 0x02	; 2
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <strrev+0x18>
 2f6:	7c 91       	ld	r23, X
 2f8:	6d 93       	st	X+, r22
 2fa:	70 83       	st	Z, r23
 2fc:	62 91       	ld	r22, -Z
 2fe:	ae 17       	cp	r26, r30
 300:	bf 07       	cpc	r27, r31
 302:	c8 f3       	brcs	.-14     	; 0x2f6 <strrev+0x10>
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
